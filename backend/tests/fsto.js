// Generated by CoffeeScript 1.8.0
(function() {
  var assert, expect, models, _ref;

  models = require('../models');

  _ref = require('chai'), assert = _ref.assert, expect = _ref.expect;

  describe('fsto', function() {
    var episode, fs_url, season, serial;
    this.timeout(40000);
    fs_url = "http://fs.to/video/serials/iMb0cUQyusQCvXDNKahvLa-fargo.html";
    serial = null;
    season = null;
    episode = null;
    before(function(done) {
      return models.Serial.findOne({
        url: 'fargo'
      }, function(err, result) {
        var _ref1, _ref2;
        expect(err).to.not.exist;
        if (serial == null) {
          serial = result;
        }
        if (season == null) {
          season = serial != null ? (_ref1 = serial.seasons) != null ? _ref1[0] : void 0 : void 0;
        }
        if (episode == null) {
          episode = season != null ? (_ref2 = season.episodes) != null ? _ref2[0] : void 0 : void 0;
        }
        return done();
      });
    });
    afterEach(function(done) {
      return serial.save(done);
    });
    describe('full url', function() {
      return it('should save url and id', function() {
        serial.fsto.full_url = fs_url;
        assert.typeOf(serial.fsto.url, 'string');
        return assert.typeOf(serial.fsto.id, 'string');
      });
    });
    describe('get name and image', function() {
      return it('should get name and image', function(done) {
        return serial.fs_get_name_and_image(function(err) {
          expect(err).to.not.exist;
          assert.typeOf(serial.fsto.name, 'string');
          assert.typeOf(serial.fsto.image_url, 'string');
          return done();
        });
      });
    });
    describe('get seasons', function() {
      return it('should get seasons', function(done) {
        return serial.fs_get_seasons(function(err) {
          expect(err).to.not.exist;
          expect(serial.seasons).to.have.length.least(1);
          season = serial.seasons[0];
          expect(season.number).to.be.a('number');
          expect(season.fsto.folder_id).to.be.a('number');
          return done();
        });
      });
    });
    describe('get translation', function() {
      return it('should get a translation', function(done) {
        return season.fs_get_translation(function(err) {
          expect(err).to.not.exist;
          expect(season.fsto.en_folder_id).to.be.a('number');
          return done();
        });
      });
    });
    describe('get episodes', function() {
      return it('should get episodes', function(done) {
        return season.fs_get_episodes(function(err) {
          expect(err).to.not.exist;
          expect(season.episodes).to.have.length.least(1);
          episode = season.episodes[0];
          expect(episode.fsto.files).to.have.length.least(1);
          expect(episode.fsto.files[0].file_id).to.be.a.number;
          expect(episode.fsto.files[0].quality).to.have.length.least(1);
          return done();
        });
      });
    });
    describe.only('get link', function() {
      return it('should get video link', function(done) {
        return episode.fsto.files[0].get_link(done);
      });
    });
    return describe('update links', function() {
      return it('should update links', function(done) {
        return serial.fs_update_links(done);
      });
    });
  });

  describe.skip('from urls', function() {
    var fs_urls;
    this.timeout(600000);
    fs_urls = ["http://fs.to/video/serials/iw8ypXjXXom7QpgYXsvU2Y-vo-vse-tyazhkije.html", "http://fs.to/video/serials/iLb46RC7QyNB7FLUnLcC0U-igra-prestolov.html", "http://fs.to/video/serials/iw8Mx62PJkI9ELIKM8UlLa-ostanovis-i-gori.html", "http://fs.to/video/serials/i4ELwy5R56vkIPRo6tF9fj2-druzya.html", "http://fs.to/video/serials/iMaZjNRFmTPd4WWhmFElAA-kak-ya-vstretil-vashu-mamu.html", "http://fs.to/video/serials/iMb0cUQyusQCvXDNKahvLa-fargo.html", "http://fs.to/video/serials/iM7yOFI1uKKPZ6VZKZd9D2-nastoyashhij-detektiv.html"];
    before(function(done) {
      return models.Serial.remove({}, done);
    });
    return it('should make it all', function(done) {
      return models.Serial.fs_serial_from_urls(fs_urls, done);
    });
  });

}).call(this);
