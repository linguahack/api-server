// Generated by CoffeeScript 1.8.0
(function() {
  var fsto, request, utils;

  fsto = {};

  if (typeof window !== "undefined" && window !== null) {
    window.fsto = fsto;
    request = function(params, cb) {
      var qs, url;
      url = params.url, qs = params.qs;
      return jQuery.get(url, qs, function(data) {
        return cb(null, {
          body: data
        }, data);
      });
    };
  } else {
    module.exports = fsto;
    utils = require('./utils');
    request = require('request');
  }

  fsto.get_link = function(params, cb) {
    var fs_file, season, serial;
    serial = params.serial, season = params.season, fs_file = params.fs_file;
    return request({
      url: serial.fsto.player_url,
      qs: {
        play: 1,
        file: fs_file.file_id
      },
      proxy: "http://213.33.226.106/"
    }, (function(_this) {
      return function(err, resp, body) {
        var e_fromdb, e_parsed, episodes_fromdb, file, javascript_playlist_regexp, javascript_playlist_regexp2, json, playlist_parsed, text, _i, _len, _ref, _ref1;
        if (err != null) {
          cb(err);
          return;
        }
        javascript_playlist_regexp = /onUserViewing[\s\S]*playlist: (\[[^\[]*?\])/m;
        text = (_ref = javascript_playlist_regexp.exec(body)) != null ? _ref[1] : void 0;
        if (text == null) {
          javascript_playlist_regexp2 = /onUserViewing[\s\S]*playlist: (\[[^"]*?("[^"]*?"[^"]*?)*?\])/m;
          text = (_ref1 = javascript_playlist_regexp2.exec(body)) != null ? _ref1[1] : void 0;
        }
        if (text == null) {
          cb({
            message: 'cannot parse body',
            body: body
          });
          return;
        }
        json = utils.jsonify(text);
        playlist_parsed = JSON.parse(json);
        episodes_fromdb = season.episodes;
        for (_i = 0, _len = playlist_parsed.length; _i < _len; _i++) {
          e_parsed = playlist_parsed[_i];
          e_fromdb = episodes_fromdb.filter(function(e_fromdb) {
            return e_parsed.fsData.file_series === e_fromdb.number.toString();
          });
          if (e_fromdb.length > 0) {
            file = e_fromdb[0].fsto.files.filter(function(file) {
              return e_parsed.fsData.file_quality === file.quality;
            });
            file[0].link = e_parsed.fsData.download_url;
            file[0].last_updated = new Date;
          }
        }
        return cb(null);
      };
    })(this));
  };

}).call(this);
